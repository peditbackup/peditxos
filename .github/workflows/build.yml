# .github/workflows/build.yml

# The name of the workflow as it will appear in the Actions tab
name: 'PeDitXOS Firmware Builder'

# This section defines when the workflow will run.
# 'workflow_dispatch' allows us to trigger it manually via the API from our website.
on:
  workflow_dispatch:
    # Define all the inputs that our website will send
    inputs:
      device_target:
        description: 'Device Target'
        required: true
        type: string
      device_profile:
        description: 'Device Profile'
        required: true
        type: string
      target_arch:
        description: 'Target Architecture'
        required: true
        type: string
      openwrt_version:
        description: 'OpenWrt Version'
        required: true
        type: string
      extra_packages:
        description: 'Extra packages'
        required: false
        type: string
      theme_choice:
        description: 'Selected LuCI theme'
        required: true
        type: string
      # New inputs for advanced settings
      root_password:
        description: 'The root password for the device'
        required: false
        type: string
      lan_ip:
        description: 'The LAN IP address'
        required: false
        type: string
      wifi_24_enabled:
        description: 'Enable 2.4GHz WiFi'
        required: false
        type: string
      wifi_24_ssid:
        description: '2.4GHz WiFi SSID'
        required: false
        type: string
      wifi_24_password:
        description: '2.4GHz WiFi Password'
        required: false
        type: string
      wifi_5_enabled:
        description: 'Enable 5GHz WiFi'
        required: false
        type: string
      wifi_5_ssid:
        description: '5GHz WiFi SSID'
        required: false
        type: string
      wifi_5_password:
        description: '5GHz WiFi Password'
        required: false
        type: string

# Defines the jobs that will run in this workflow
jobs:
  build_firmware:
    name: Build Firmware
    # The type of machine to run the job on
    runs-on: ubuntu-latest

    # A sequence of tasks that make up the job
    steps:
      # Step 1: Check out the repository code
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      # Step 2: Install necessary tools on the runner
      - name: 'Install Build Dependencies'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget tar make coreutils rsync openssh-client curl jq

      # Step 3: Download and extract the OpenWrt ImageBuilder
      - name: 'Download and Extract OpenWrt ImageBuilder'
        run: |
          TARGET_NAME=$(echo "${{ github.event.inputs.device_target }}" | tr '/' '-')
          IMAGEBUILDER_FILENAME="openwrt-imagebuilder-${{ github.event.inputs.openwrt_version }}-${TARGET_NAME}.Linux-x86_64.tar.xz"
          IMAGEBUILDER_URL="https://downloads.openwrt.org/releases/${{ github.event.inputs.openwrt_version }}/targets/${{ github.event.inputs.device_target }}/${IMAGEBUILDER_FILENAME}"
          wget -q "${IMAGEBUILDER_URL}"
          mkdir imagebuilder
          tar -xf "${IMAGEBUILDER_FILENAME}" --strip-components=1 -C imagebuilder

      # Step 4: Prepare the build environment (add custom repos, etc.)
      - name: 'Prepare ImageBuilder Environment'
        run: |
          IMAGEBUILDER_DIR="imagebuilder"
          echo "IMAGEBUILDER_DIR=${IMAGEBUILDER_DIR}" >> $GITHUB_ENV
          TARGET_ARCH="${{ github.event.inputs.target_arch }}"
          echo "TARGET_ARCH=${TARGET_ARCH}" >> $GITHUB_ENV
          KEY_DIR="${IMAGEBUILDER_DIR}/etc/opkg/keys"
          mkdir -p "${KEY_DIR}"
          cp ./custom-keys/passwall.pub "${KEY_DIR}/"
          REPO_CONF_FILE="${IMAGEBUILDER_DIR}/etc/opkg/customfeeds.conf"
          RELEASE_MAJOR_VERSION=$(echo "${{ github.event.inputs.openwrt_version }}" | cut -d. -f1,2)
          echo "src/gz passwall_luci https://repo.peditxdl.ir/passwall-packages/releases/packages-${RELEASE_MAJOR_VERSION}/${TARGET_ARCH}/passwall_luci" >> "${REPO_CONF_FILE}"
          echo "src/gz passwall_packages https://repo.peditxdl.ir/passwall-packages/releases/packages-${RELEASE_MAJOR_VERSION}/${TARGET_ARCH}/passwall_packages" >> "${REPO_CONF_FILE}"
          echo "src/gz passwall2 https://repo.peditxdl.ir/passwall-packages/releases/packages-${RELEASE_MAJOR_VERSION}/${TARGET_ARCH}/passwall2" >> "${REPO_CONF_FILE}"

      # Step 5: Create a custom script for advanced settings
      - name: 'Generate Custom UCI Defaults Script'
        run: |
          UCI_SCRIPT_PATH="${{ github.workspace }}/files/etc/uci-defaults/99-advanced-settings"
          echo "#!/bin/sh" > "${UCI_SCRIPT_PATH}"
          if [ -n "${{ github.event.inputs.root_password }}" ]; then
            echo "echo 'root:${{ github.event.inputs.root_password }}' | chpasswd" >> "${UCI_SCRIPT_PATH}"
          fi
          if [ -n "${{ github.event.inputs.lan_ip }}" ]; then
            echo "uci set network.lan.ipaddr='${{ github.event.inputs.lan_ip }}'" >> "${UCI_SCRIPT_PATH}"
            echo "uci commit network" >> "${UCI_SCRIPT_PATH}"
          fi
          if [ "${{ github.event.inputs.wifi_24_enabled }}" = "true" ] && [ -n "${{ github.event.inputs.wifi_24_ssid }}" ]; then
            echo "uci set wireless.radio0.disabled='0'" >> "${UCI_SCRIPT_PATH}"
            echo "uci set wireless.@wifi-iface[0].ssid='${{ github.event.inputs.wifi_24_ssid }}'" >> "${UCI_SCRIPT_PATH}"
            echo "uci set wireless.@wifi-iface[0].encryption='psk2'" >> "${UCI_SCRIPT_PATH}"
            echo "uci set wireless.@wifi-iface[0].key='${{ github.event.inputs.wifi_24_password }}'" >> "${UCI_SCRIPT_PATH}"
          else
            echo "uci set wireless.radio0.disabled='1'" >> "${UCI_SCRIPT_PATH}"
          fi
          if [ "${{ github.event.inputs.wifi_5_enabled }}" = "true" ] && [ -n "${{ github.event.inputs.wifi_5_ssid }}" ]; then
            echo "uci set wireless.radio1.disabled='0'" >> "${UCI_SCRIPT_PATH}"
            echo "uci set wireless.@wifi-iface[1].ssid='${{ github.event.inputs.wifi_5_ssid }}'" >> "${UCI_SCRIPT_PATH}"
            echo "uci set wireless.@wifi-iface[1].encryption='psk2'" >> "${UCI_SCRIPT_PATH}"
            echo "uci set wireless.@wifi-iface[1].key='${{ github.event.inputs.wifi_5_password }}'" >> "${UCI_SCRIPT_PATH}"
          else
            echo "if uci get wireless.radio1 >/dev/null 2>&1; then uci set wireless.radio1.disabled='1'; fi" >> "${UCI_SCRIPT_PATH}"
          fi
          echo "uci commit wireless" >> "${UCI_SCRIPT_PATH}"
          echo "exit 0" >> "${UCI_SCRIPT_PATH}"
          chmod +x "${UCI_SCRIPT_PATH}"
          echo "--- Custom settings script created ---"
          cat "${UCI_SCRIPT_PATH}"

      # Step 6: Download your custom .ipk packages
      - name: 'Download Custom IPK Packages'
        run: |
          CUSTOM_PKG_DIR="${{ env.IMAGEBUILDER_DIR }}/packages"
          mkdir -p "${CUSTOM_PKG_DIR}"
          download_latest_ipk() {
            local REPO_NAME="$1"
            local API_URL="https://api.github.com/repos/peditx/${REPO_NAME}/releases/latest"
            local IPK_URL=$(curl -s "$API_URL" | grep "browser_download_url.*ipk" | cut -d '"' -f 4 | head -n 1)
            if [ -n "$IPK_URL" ]; then wget -q "$IPK_URL" -P "${CUSTOM_PKG_DIR}"; fi
          }
          THEMESWITCH_VERSION=$(curl -s https://api.github.com/repos/peditx/luci-app-themeswitch/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          if [ -n "$THEMESWITCH_VERSION" ]; then
            THEMESWITCH_URL="https://github.com/peditx/luci-app-themeswitch/releases/download/${THEMESWITCH_VERSION}/luci-app-themeswitch_${THEMESWITCH_VERSION}_${{ env.TARGET_ARCH }}.ipk"
            wget -q "$THEMESWITCH_URL" -P "${CUSTOM_PKG_DIR}"
          fi
          download_latest_ipk "luci-theme-peditx"
          download_latest_ipk "luci-theme-carbonpx"

      # Step 7: Build the final firmware image
      - name: 'Build Firmware Image'
        run: |
          cd "${{ env.IMAGEBUILDER_DIR }}"
          BASE_PACKAGES="luci luci-ssl luci-compat curl screen sshpass procps-ng-pkill luci-app-ttyd coreutils coreutils-base64 coreutils-nohup"
          ALL_PACKAGES="${BASE_PACKAGES} -luci-theme-bootstrap luci-theme-peditx luci-theme-carbonpx luci-app-themeswitch ${{ github.event.inputs.extra_packages }}"
          make image PROFILE="${{ github.event.inputs.device_profile }}" \
            PACKAGES="${ALL_PACKAGES}" \
            FILES="${{ github.workspace }}/files" \
            BIN_DIR="${{ github.workspace }}/output"

      # Step 8: Rename the output files for branding
      - name: 'Organize and Rename Output Files'
        run: |
          cd "${{ github.workspace }}/output"
          if [ -z "$(ls -A .)" ]; then exit 1; fi
          for f in openwrt-*; do mv -- "$f" "PeDitXOS-${f#openwrt-}"; done

      # Step 9: Upload the final firmware to SourceForge
      - name: 'Upload Firmware to SourceForge'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
          SF_PROJECT_NAME: ${{ secrets.SF_PROJECT_NAME }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H frs.sourceforge.net >> ~/.ssh/known_hosts
          REMOTE_DIR="/home/frs/project/${SF_PROJECT_NAME}/${{ github.event.inputs.openwrt_version }}/"
          rsync -avz --progress -e "ssh -i ~/.ssh/id_rsa" \
            "${{ github.workspace }}/output/" \
            "${SF_USERNAME}@frs.sourceforge.net:${REMOTE_DIR}"
          echo "Upload complete."
